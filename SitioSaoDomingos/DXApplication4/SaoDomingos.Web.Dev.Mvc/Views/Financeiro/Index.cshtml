@model List<SaoDomingos.Web.Dev.Mvc.Models.ModelView.DiarioView>
@using SaoDomingos.Web.Dev.Mvc.Models.ModelView



@{
    ViewData["Title"] = "Registros";
    Layout = "~/Views/Shared/_LayoutMenu.cshtml";
}

<title>@ViewData["Title"]</title>

<nav class="navbar navbar-expand navbar-dark bg-dark">


    <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#navSubar" aria-expanded="false" aria-controls="navbar">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div id="navSubar" class="collapse navbar-collapse">

        <ul class="navbar-nav">

            <li class="nav-item">
                <div class="nav-link">@(Html.DevExtreme().DateBox().Placeholder("Data Inicial").DisplayFormat("dd/MM/yyyy").ID("DtIni").Value(new DateTime(DateTime.Now.Year,01,01)))</div>
            </li>
            <li class="nav-item">
                <div class="nav-link"> @(Html.DevExtreme().DateBox().Placeholder("Data Final").DisplayFormat("dd/MM/yyyy").ID("DtFim").Value(DateTime.Now))</div>
            </li>
            <li class="nav-item">
                <div class="nav-link"> @Html.DevExtreme().Button().ID("btnIr").Text("Ir!").Type(ButtonType.Default).StylingMode(ButtonStylingMode.Contained).OnClick("reloadData") </div>
            </li>
        </ul>
    </div>

</nav>

@(Html.DevExtreme().DataGrid<DiarioView>()
        .ID("gridContainer")
        .RowAlternationEnabled(true)
        .ColumnHidingEnabled(false)
        .WordWrapEnabled(true)
        .ColumnChooser(c => c
            .Enabled(true)
            .Mode(GridColumnChooserMode.Select))
        .Export(e => e
            .Enabled(true)
            .FileName("RegistrosFinanceiros"))
        .OnExporting("exporting")
        .ShowBorders(true)
        .Paging(p => p.Enabled(false))
        .FocusedRowEnabled(true)
        .SearchPanel(c=>c.Visible(true).Placeholder("Pequisar").Width(250))
        .Editing(e => e
            .Mode(GridEditMode.Popup)
            .AllowUpdating(true)
            .AllowDeleting(true)
            .AllowAdding(true)
            .SelectTextOnEditStart(true)
            .UseIcons(true)
            .Popup(p => p
                .Title("Informações Financeiras")
                .Width("auto")
                .Height("auto")
                .MinWidth(400)
                .ShowTitle(true)
                .Position(pos => pos
                    .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                    .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                    .Of(new JS("window"))
                )
            )
            .Form(f => f.Items(items => {
                items.AddGroup()
                    .ColCount(3)
                    .ColSpan(2)
                    .Items(groupItems => {
                        groupItems.AddSimpleFor(m => m.DebitoId)
                        .ColSpan(3)
                        .Label(c => c
                            .Text("Débito")
                            .Location(FormLabelLocation.Top));
                        groupItems.AddSimpleFor(m => m.CreditoId)
                        .ColSpan(3)
                        .Label(c => c
                            .Text("Crédito")
                            .Location(FormLabelLocation.Top));
                        groupItems.AddSimpleFor(m => m.ParticipanteId)
                         .ColSpan(3)
                        .Label(c => c
                            .Text("Participante")
                            .Location(FormLabelLocation.Top));
                        groupItems.AddSimpleFor(m => m.Data)
                        .ColSpan(1)
                         .Label(c => c
                            .Text("Data")
                            .Location(FormLabelLocation.Top));
                        groupItems.AddSimpleFor(m => m.Valor)
                        .ColSpan(2)
                        .Label(c => c
                            .Text("Valor")
                            .Location(FormLabelLocation.Top))
                        .Editor(c => c
                            .NumberBox()
                            .Format("R$ #,###.00"));
                        groupItems.AddSimpleFor(m => m.Historico)
                         .ColSpan(3)
                         .Label(c => c
                            .Text("Histórico")
                            .Location(FormLabelLocation.Top))
                            .Editor(c => c
                                .TextArea()
                                .Height(100));
                    });
            }))
        )
        .Columns(columns => {
            columns.AddFor(m => m.Id).Visible(false);
            columns.AddFor(m => m.DataCadastro).Visible(false).Format("dd/MM/yyyy HH:mm");
            columns.AddFor(m => m.usuarios).Visible(false);
            columns.AddFor(m => m.Data).Format("dd/MM/yyyy").Width(90).MinWidth(90);
            columns.AddFor(m => m.debitos).HidingPriority(1);
            columns.AddFor(m => m.creditos).HidingPriority(2);
            columns.AddFor(m => m.participantes);
            columns.AddFor(m => m.Historico).HidingPriority(0);
            columns.AddFor(m => m.Valor).Format("R$ #,###.00").MinWidth(90);
            columns.AddFor(m => m.DebitoId).Visible(false)
                .Lookup(lookup => lookup
                    .DataSource(d => d.Mvc().Controller("Financeiro").LoadAction("DataGridLookUpPlanoContas").Key("Id"))
                    .DisplayExpr("Contabil")
                    .ValueExpr("Id")
                );
            columns.AddFor(m => m.CreditoId).Visible(false)
                .Lookup(lookup => lookup
                    .DataSource(d => d.Mvc().Controller("Financeiro").LoadAction("DataGridLookUpPlanoContas").Key("Id"))
                    .DisplayExpr("Contabil")
                    .ValueExpr("Id")
                );
            columns.AddFor(m => m.ParticipanteId).Visible(false)
                .Lookup(lookup => lookup
                    .DataSource(d => d.Mvc().Controller("Financeiro").LoadAction("DataGridLookUpParticipantes").Key("Id"))
                    .DisplayExpr("Nome")
                    .ValueExpr("Id")
                );
        })
        .DataSource(d => d.Mvc()
            .Controller("Financeiro")
            .LoadAction("Pegar").LoadParams(new { userData = new JS("function () {return ColherParametros();  }") })
            .UpdateAction("Edit").Key("Id")
            .DeleteAction("Delete").Key("Id")
            .InsertAction("Adicionar").Key("Id")
            .Key("Id")
        )
         .FilterRow(f => f.Visible(true))
         .HeaderFilter(f => f.Visible(true))
         .AllowColumnReordering(true)
         .AllowColumnResizing(true)
         .ColumnAutoWidth(true)
         .GroupPanel(f => f.Visible(true).EmptyPanelText("Arraste campos aqui para agrupar"))
         .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
         .Height("auto")
         .ShowBorders(true)
         .Grouping(g => g.AutoExpandAll(false))
         .Summary(s => s
         .TotalItems(totalItems =>{
             totalItems.AddFor(m => m.Id).SummaryType(SummaryType.Count);})
         .GroupItems(groupItems =>{
             groupItems.AddFor(m => m.Valor).SummaryType(SummaryType.Sum);
             groupItems.Add().SummaryType(SummaryType.Count);
         }))
    )

<script type="text/javascript">

    function ColherParametros() {
        var ValReqData = {
            DtIni: $("#DtIni").dxDateBox("instance").option('value').toLocaleDateString(),
            DtFim: $("#DtFim").dxDateBox("instance").option('value').toLocaleDateString()
        };
        return JSON.stringify(ValReqData);
    }

    function reloadData() {

        //var dataInicial = $("#DtIni").dxDateBox("instance").option('value')
        //var dataFinal = $("#DtFim").dxDateBox("instance").option('value')
        //var dataLimite = new Date(dataInicial.getFullYear() + 1, dataInicial.getMonth(), dataInicial.getDay());

        //if (dataInicial > dataFinal) {
        //    alert('A data inicial é maior que a final');
        //    return;
        //};

        //if (dataFinal > dataLimite) {
        //    alert('Intervalo máximo permitido é de 1 ano');
        //    return;
        //};

        $('#gridContainer').dxDataGrid("instance").refresh();
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Financeiro');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'FinanceiroSaoDomingos.xlsx');
            });
        });
        e.cancel = true;
    }

</script>