@model List<SaoDomingos.Web.Dev.Mvc.Models.ModelView.DiarioView>
@using SaoDomingos.Web.Dev.Mvc.Models.ModelView
@{
    ViewData["Title"] = "Financeiro";
    Layout = "~/Views/Shared/_LayoutMenu.cshtml";
}

<h2>@ViewData["Title"]</h2>

@(Html.DevExtreme().DataGrid<DiarioView>()
        .ID("gridContainer")
        .RowAlternationEnabled(true)
        .ShowBorders(true)
        .Paging(p => p.Enabled(false))
        .Editing(e => e.Mode(GridEditMode.Popup)
            .AllowUpdating(true)
            .AllowDeleting(true)
            .AllowAdding(true)
            .Popup(p => p
                .Title("Financeiro Infos")
                .Width("auto")
                .Height("auto")
                .ShowTitle(true)
                .Position(pos => pos
                    .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                    .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                    .Of(new JS("window"))
                )
            )
            .Form(f => f.Items(items => {
                items.AddGroup()
                    .ColCount(3)
                    .ColSpan(2)
                    .Items(groupItems => {
                        groupItems.AddSimpleFor(m => m.DebitoId)
                        .ColSpan(3) 
                        .Label(c => c
                            .Text("Débito")
                            .Location(FormLabelLocation.Top));
                        groupItems.AddSimpleFor(m => m.CreditoId)
                        .ColSpan(3)
                        .Label(c => c
                            .Text("Crédito")
                            .Location(FormLabelLocation.Top));
                        groupItems.AddSimpleFor(m => m.ParticipanteId)
                         .ColSpan(3)
                        .Label(c => c
                            .Text("Participante")
                            .Location(FormLabelLocation.Top));
                        groupItems.AddSimpleFor(m => m.Data)
                        .ColSpan(1)
                         .Label(c => c
                            .Text("Data")
                            .Location(FormLabelLocation.Top));
                        groupItems.AddSimpleFor(m => m.Valor)
                        .ColSpan(2)
                        .Label(c => c
                            .Text("Valor")
                            .Location(FormLabelLocation.Top))
                        .Editor(c=>c
                            .NumberBox()
                            .Format("R$ #,###.00"));
                        groupItems.AddSimpleFor(m => m.Historico)
                         .ColSpan(3)
                         .Label(c => c
                            .Text("Histórico")
                            .Location(FormLabelLocation.Top))
                            .Editor(c => c
                                .TextArea()
                                .Height(100));
                        groupItems.AddSimpleFor(m => m.Id)
                        .Editor(c => c
                            .TextBox().Disabled(true))
                        .Label(c => c
                            .Location(FormLabelLocation.Top));
                        groupItems.AddSimpleFor(m => m.DataCadastro)
                        .Editor(c => c
                            .DateBox().Disabled(true))
                        .Label(c => c
                            .Location(FormLabelLocation.Top));
                        groupItems.AddSimpleFor(m => m.usuarios)
                        .Editor(c => c
                            .TextBox().Disabled(true))
                        .Label(c => c
                            .Location(FormLabelLocation.Top));
                    });
            }))
        )
        .Columns(columns => {
            columns.AddFor(m => m.Id).Visible(false);
            columns.AddFor(m => m.DataCadastro).Visible(false).Format("dd/MM/yyyy HH:mm");
            columns.AddFor(m => m.usuarios).Visible(false);
            columns.AddFor(m => m.Data).Format("dd/MM/yyyy");
            columns.AddFor(m => m.debitos);
            columns.AddFor(m => m.creditos);
            columns.AddFor(m => m.participantes);
            columns.AddFor(m => m.Historico);
            columns.AddFor(m => m.Valor).Format("R$ #,###.00");
            columns.AddFor(m => m.DebitoId).Visible(false)
                .Lookup(lookup => lookup
                    .DataSource(d => d.Mvc().Controller("Financeiro").LoadAction("DataGridLookUpPlanoContas").Key("Id"))
                    .DisplayExpr("Contabil")
                    .ValueExpr("Id")
                );
            columns.AddFor(m => m.CreditoId).Visible(false)
                .Lookup(lookup => lookup
                    .DataSource(d => d.Mvc().Controller("Financeiro").LoadAction("DataGridLookUpPlanoContas").Key("Id"))
                    .DisplayExpr("Contabil")
                    .ValueExpr("Id")
                );
            columns.AddFor(m => m.ParticipanteId).Visible(false)
                .Lookup(lookup => lookup
                    .DataSource(d => d.Mvc().Controller("Financeiro").LoadAction("DataGridLookUpParticipantes").Key("Id"))
                    .DisplayExpr("Nome")
                    .ValueExpr("Id")
                );
        })
        .DataSource(d => d.Mvc()
            .Controller("Financeiro")
            .LoadAction("Pegar")
            .UpdateAction("Edit").Key("Id")
            .DeleteAction("Delete").Key("Id")
            .InsertAction("Adicionar").Key("Id")
            .Key("Id")
        )
         .FilterRow(f => f.Visible(true))
         .HeaderFilter(f => f.Visible(true))
         .AllowColumnReordering(true)
         .AllowColumnResizing(true)
         .ColumnAutoWidth(true)
         .ColumnHidingEnabled(true)
         .GroupPanel(f => f.Visible(true))
         .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
         .Height("auto")
         .ShowBorders(true)
         .Grouping(g => g.AutoExpandAll(false))
         .Summary(s => s
         .TotalItems(totalItems =>{
             totalItems.AddFor(m => m.Id).SummaryType(SummaryType.Count);})
         .GroupItems(groupItems =>{
             groupItems.AddFor(m => m.Valor).SummaryType(SummaryType.Sum);
             groupItems.Add().SummaryType(SummaryType.Count);
         }))
    )
